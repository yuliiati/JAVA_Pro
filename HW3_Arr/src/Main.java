import java.lang.reflect.Array;

public class Main {
// 1. Дан массив чисел в котором все числа имеют повторения, кроме одного числа. Найти это число

// 2. Дан массив чисел, в котором есть все числа от 0 до N . Все эти числа в единственном экземпляре. Расположены в разнобой.
//    Одно число в этом массиве пропущено ( Например {1 0 2 8 6 5 4 7} - это 3 ). Найти пропущенное число

// 3. Дан массив чисел. Найти число состоящее из собственных делителей.
//    Например число 128 состоит из 1 2 и 8. 128 % 1 == 0 , 128 % 2 == 0 и 128 % 8 == 0. Вот такие числа надо найти.

/*
4.*   Ну и для особо отличившихся. Написать метод, который генерирует двумерный массив длиной N и высотой H.
      Далее заполняет получившийся массив числами от 1 до W по спирали.

Например массив:
                        [ ][ ][ ][ ]
                        [ ][ ][ ][ ]
                        [ ][ ][ ][ ]
имеет N == 4 and H == 3 и вид

                        [ 1 ][ 2 ][ 3 ][ 4 ]
                        [10] [11] [12 ][ 5 ]
                        [ 9 ][ 8 ][ 7 ][ 6 ]

***** ВСЕ ЗАДАЧИ ( И УСЛОВИЯ К НЕЙ ) КОТОРЫЕ Я ДАЛ (И РАНЕЕ ТОЖЕ)
ПОМЕСТИТЬ В ОТДЕЛЬНЫЙ КЛАСС ГДЕ ДАННАЯ ЗАДАЧА БУДЕТ РЕШЕНА.
И РЕШАТЬ ИХ ВСЕ ПОКА НЕ РЕШИТЕ С САМОГО НАЧАЛА!
*/


    public static void main(String[] args) {

        int[][] arr1 = {{1, 1, 1, 1},
                      {1, 0, 1, 1},
                      {1, 1, 1, 1}};
        int uniqueNum = findNumber.findUniqueNumber(arr1);

        System.out.println("Уникальное число: " + uniqueNum);


        int[] arr = {1, 0, 2, 8, 6, 5, 4, 7};
        int missingNum = MissingNumber.findMissingNumber(arr);
        System.out.println("Пропущенное число: " + missingNum);


        int[] arrr = {128, 36, 81, 15, 7, 143};
        isSelfDividing1.findNumbersWithSelfDividingDigits(arr);


        int[][] arr3 = SpiralArray.generateSpiralArray(12, 3, 4);
        for (int[] row : arr3) {
            System.out.println(Array.toString(row));
        }




    }




}